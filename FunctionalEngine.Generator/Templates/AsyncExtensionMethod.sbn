{{~ func has_constraint(generic) ~}}
    {{~ ret generic.constraint ~}}
{{~ end -}}
using System.Threading.Tasks;

#nullable enable
#pragma warning disable CS8603

namespace {{ namespace }}
{
    {{ string.downcase accessibility }} static partial class {{ extension_class_name }}
    {
        {{~ for method in methods ~}}
        {{~ valid_constraints = method.generics | array.filter @has_constraint | array.map "constraint" ~}}
        {{ string.downcase method.accessibility }} static async Task<{{ method.return_type }}> {{ method.name }}{{ render_generics method.generics }}(
            this Task<{{ method.extension_parameter.type }}> {{ method.extension_parameter.name }}Task
            {{- for parameter in method.parameters }},
            {{ parameter.type }} {{ parameter.name }}{{ end }}
        )
        {{- if valid_constraints.size > 0 }}
        {{~ for constraint in valid_constraints ~}}
            {{ constraint }}
        {{~ end ~}}
        =>
        {{~ else }} =>
        {{~ end ~}}
            {{ if method.needs_extra_await }}await {{ end }}(await {{ method.extension_parameter.name }}Task).{{ method.original_name }}(
            {{- for parameter in method.parameters -}}
            {{ parameter.name }}{{ if !for.last }}, {{ end }}
            {{- end }});

        {{~ end ~}}
    }
}

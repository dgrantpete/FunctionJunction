#nullable enable

{{~ if polymorphic_attributes.size > 0 ~}}
using System.Text.Json.Serialization;
{{~ end ~}}

{{~ if namespace != "<global namespace>" ~}}
namespace {{ namespace }} 
{
{{~ end ~}}
    {{~ for attribute in polymorphic_attributes ~}}
    {{ attribute }}
    {{~ end ~}}
    {{ string.downcase accessibility }} abstract partial {{ string.downcase object_type }} {{ type }}
    {
        {{~ if generate_private_constructor ~}}
        private {{ name }}() { }

        {{~ end ~}}
        {{~ if (array.size match_model) > 0 ~}}
        /// <summary>
        /// Matches the current instance against all possible variants of the <c>{{ name }}</c> discriminated union
        /// and invokes the corresponding function.
        /// </summary>
        /// <typeparam name="TResult">The type of the result returned by the match functions.</typeparam>
        {{~ for match in match_model ~}}
        /// <param name="on{{ match.member_name }}">The function to invoke when the instance is of type <c>{{ match.member_name }}</c>.</param>
        {{~ end ~}}
        /// <returns>The result of invoking the corresponding matched function.</returns>
        /// <exception cref="InvalidOperationException">Thrown when the instance is not a known variant of the discriminated union.</exception>
        {{ string.downcase minimum_member_accessibility }} TResult Match<TResult>(
            {{~ for match in match_model ~}}
            {{ match.parameter }}{{ if !for.last }},{{ end }}
            {{~ end ~}}
        ) => 
            this switch
            {
                {{~ for match in match_model ~}}
                {{ match.match_arm }},
                {{~ end ~}}
                _ => throw new InvalidOperationException($"Type '{this.GetType()}' was not a known variant of the discriminated union '{{ type }}' and was unhandled")
            };

        {{~ end ~}}
    }
{{~ if namespace != "<global namespace>" ~}}
}
{{ end }}